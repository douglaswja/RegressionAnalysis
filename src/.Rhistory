x <- cbind(C, A, B, FL, O)
x
C <- (Clarity-mean(Clarity))/(sqrt(var(Clarity))*999)
A <- (Aroma - mean(Aroma))/(sqrt(var(Aroma))*999)
B <- (Body - mean(Body))/(sqrt(var(Body))*37999)
FL <- (Flavor - mean(Flavor))/(sqrt(var(Flavor))*37999)
O <- (Oakiness - mean(Oakiness))/(sqrt(var(Oakiness))*37999)
C
size(C)
length(C)
length(A)
length(B)
length(FL)
length(O)
cbind(C, A, B, FL)
cbind(C, A, B, FL, O)
x <- cbind(C, A, B, FL, O)
x
x <- cor(x) # Correlation matrix of x, X'X
# The condition number is:
cond <- max(eigen(x)$values)/min(eigen(x)$values)
cond
# Centering data: Subtract the mean, divide by sqrt(S_xx)
# sqrt(S_xx) = (n-p) * MS_res
# n = 38, p = 7, n-p = 31
q <- Quality
C <- (Clarity-mean(Clarity))/(sqrt(var(Clarity))*37)
A <- (Aroma - mean(Aroma))/(sqrt(var(Aroma))*37)
B <- (Body - mean(Body))/(sqrt(var(Body))*37999)
FL <- (Flavor - mean(Flavor))/(sqrt(var(Flavor))*37)
O <- (Oakiness - mean(Oakiness))/(sqrt(var(Oakiness))*37)
x <- cbind(C, A, B, FL, O)
x <- cor(x) # Correlation matrix of x, X'X
# The condition number is:
cond <- max(eigen(x)$values)/min(eigen(x)$values)
#condition indices:
cat("The condition indices are: ", max(eigen(x)$values)/eigen(x)$values, "\n")
#### To find VIFs:
C <- solve(x)  #this is (X'X)^(-1)
VIF <- diag(C)
cat("The VIF values are: ", VIF, "\n")
#Normal probability plot =  QQ plot
qqnorm(rstandard(model),datax = TRUE, ylab = "Standardized Residuals", xlab = "Z scores", main = "Normal Probability Plot Delivery Data")
qqline(rstandard(model),datax = TRUE)
#Normal probability plot =  QQ plot
qqnorm(rstandard(model1),datax = TRUE, ylab = "Standardized Residuals", xlab = "Z scores", main = "Normal Probability Plot Delivery Data")
qqline(rstandard(model1),datax = TRUE)
#Normal probability plot =  QQ plot
qqnorm(rstandard(model1),datax = TRUE, ylab = "Residuals", xlab = "Z scores", main = "Normal Probability Plot Delivery Data")
qqline(rstandard(model1),datax = TRUE)
#Normal probability plot =  QQ plot
qqnorm(rstandard(model1),datax = TRUE, ylab = "Residuals", xlab = "Z scores", main = "Normal Probability Plot Wine Data")
qqline(rstandard(model1),datax = TRUE)
#Normal probability plot =  QQ plot
qqnorm(rstandard(model1),datax = TRUE, ylab = "Standardized Residuals", xlab = "Z scores", main = "Normal Probability Plot Wine Data")
qqline(rstandard(model1),datax = TRUE)
#standardized residuals vs fitted:
plot(model$fitted.values,rstandard(model1), xlab="fitted time", ylab= "Standardized Residuals", main = "Delivery Data")
#standardized residuals vs fitted:
plot(model1$fitted.values,rstandard(model1), xlab="fitted time", ylab= "Standardized Residuals", main = "Delivery Data")
abline(h=0)
#standardized residuals vs fitted:
plot(model1$fitted.values,rstandard(model1), xlab="Fitted Quality", ylab= "Standardized Residuals", main = "Wine Data")
abline(h=0)
#Normal probability plot =  QQ plot
par(1,2)
qqnorm(rstandard(model1),datax = TRUE, ylab = "Standardized Residuals",
xlab = "Z scores", main = "Normal Probability Plot Wine Data")
qqline(rstandard(model1),datax = TRUE)
#standardized residuals vs fitted:
plot(model1$fitted.values,rstandard(model1), xlab="Fitted Quality", ylab= "Standardized Residuals", main = "Wine Data")
abline(h=0)
#Normal probability plot =  QQ plot
par(mfrow=c(1,2))
qqnorm(rstandard(model1),datax = TRUE, ylab = "Standardized Residuals",
xlab = "Z scores", main = "Normal Probability Plot Wine Data")
qqline(rstandard(model1),datax = TRUE)
#standardized residuals vs fitted:
plot(model1$fitted.values,rstandard(model1), xlab="Fitted Quality", ylab= "Standardized Residuals", main = "Wine Data")
abline(h=0)
2/38
sort(rstandard(model1))
3/38
head(wine)
#standardized residuals vs Regressor:
plot(Clarity, rstandard(model1),
xlab="Fitted Quality", ylab= "Standardized Residuals",
main = "Clarity")
par(mfrow=c(2,3))
#standardized residuals vs Regressor:
plot(Clarity, rstandard(model1),
xlab="Fitted Quality", ylab= "Standardized Residuals",
main = "Clarity")
abline(h=0)
par(mfrow=c(2,3))
#standardized residuals vs Regressor:
plot(Clarity, rstandard(model1),
xlab="Clarity", ylab= "Standardized Residuals",
main = "Residuals vs Clarity")
abline(h=0)
plot(Aroma, rstandard(model1),
xlab="Aroma", ylab= "Standardized Residuals",
main = "Residuals vs Aroma")
abline(h=0)
plot(Body, rstandard(model1),
xlab="Body", ylab= "Standardized Residuals",
main = "Residuals vs Body")
abline(h=0)
plot(Flavor, rstandard(model1),
xlab="Flavor", ylab= "Standardized Residuals",
main = "Residuals vs Flavor")
abline(h=0)
plot(Oakiness, rstandard(model1),
xlab="Oakiness", ylab= "Standardized Residuals",
main = "Residuals vs Oakiness")
abline(h=0)
plot(Region, rstandard(model1),
xlab="Region", ylab= "Standardized Residuals",
main = "Residuals vs Region")
abline(h=0)
model1 <- lm(Quality ~ Clarity + Aroma + Body + Flavor + Oakiness + Region,
data = wine)
model1 <- lm(Quality ~ Clarity + Aroma + Body + Flavor + Oakiness + Region,
data = wine)
summary(model1)
anova(model1)
pairs.panels(wine,
method = "pearson", # correlation method
hist.col = "#00BECC",
density = FALSE,  # show density plots
ellipses = FALSE # show correlation ellipses
)
model1 <- lm(Quality ~ I(log(Clarity)) + Aroma + Body + Flavor + Oakiness + Region,
data = wine)
summary(model1)
anova(model1)
#Normal probability plot =  QQ plot
par(mfrow=c(1,2))
qqnorm(rstandard(model1),datax = TRUE, ylab = "Standardized Residuals",
xlab = "Z scores", main = "Normal Probability Plot Wine Data")
qqline(rstandard(model1),datax = TRUE)
#standardized residuals vs fitted:
plot(model1$fitted.values,rstandard(model1),
xlab="Fitted Quality", ylab= "Standardized Residuals",
main = "Wine Data")
abline(h=0)
par(mfrow=c(2,3))
#standardized residuals vs Regressor:
plot(Clarity, rstandard(model1),
xlab="Clarity", ylab= "Standardized Residuals",
main = "Residuals vs Clarity")
abline(h=0)
plot(Aroma, rstandard(model1),
xlab="Aroma", ylab= "Standardized Residuals",
main = "Residuals vs Aroma")
abline(h=0)
plot(Body, rstandard(model1),
xlab="Body", ylab= "Standardized Residuals",
main = "Residuals vs Body")
abline(h=0)
plot(Flavor, rstandard(model1),
xlab="Flavor", ylab= "Standardized Residuals",
main = "Residuals vs Flavor")
abline(h=0)
plot(Oakiness, rstandard(model1),
xlab="Oakiness", ylab= "Standardized Residuals",
main = "Residuals vs Oakiness")
abline(h=0)
plot(Region, rstandard(model1),
xlab="Region", ylab= "Standardized Residuals",
main = "Residuals vs Region")
abline(h=0)
summary(model1)
anova(model1)
model1 <- lm(Quality ~ Clarity + Aroma + Body + Flavor + Oakiness + Region,
data = wine)
summary(model1)
anova(model1)
pairs.panels(wine,
method = "pearson", # correlation method
hist.col = "#00BECC",
density = FALSE,  # show density plots
ellipses = FALSE # show correlation ellipses
)
model1 <- lm(Quality ~ Clarity + I(log(Aroma)) + Body + Flavor + Oakiness + Region,
data = wine)
summary(model1)
anova(model1)
#Normal probability plot =  QQ plot
par(mfrow=c(1,2))
qqnorm(rstandard(model1),datax = TRUE, ylab = "Standardized Residuals",
xlab = "Z scores", main = "Normal Probability Plot Wine Data")
qqline(rstandard(model1),datax = TRUE)
#standardized residuals vs fitted:
plot(model1$fitted.values,rstandard(model1),
xlab="Fitted Quality", ylab= "Standardized Residuals",
main = "Wine Data")
abline(h=0)
#standardized residuals vs fitted:
plot(model1$fitted.values,rstandard(model1),
xlab="Fitted Quality", ylab= "Standardized Residuals",
main = "Wine Data")
abline(h=0)
In the Normal Probability QQ Plot we see that the 38 data points closely follow
the line $y = x$. Hence, our assumption that the errors are normally distributed
seems to hold.
Additionally, the standardized residuals seem to be randomly distributed about
the $y=0$ line when plotted against Fitted _Quality_ values.  Majority of the
points fall within the range $-2 \leq e_i \leq 2$, with the exception of one
point greater than 2 and two points less than -2. If we consider these three points
to be outliers, this proportion of outliers $\frac{3}{38} \approx 0.079$ is
reasonable for a normal distribution. As we would expect approximately $95\%$ of
the data to fall within 2 standard deviations.
```{r}
par(mfrow=c(2,3))
#standardized residuals vs Regressor:
plot(Clarity, rstandard(model1),
xlab="Clarity", ylab= "Standardized Residuals",
main = "Residuals vs Clarity")
abline(h=0)
plot(Aroma, rstandard(model1),
xlab="Aroma", ylab= "Standardized Residuals",
main = "Residuals vs Aroma")
abline(h=0)
plot(Body, rstandard(model1),
xlab="Body", ylab= "Standardized Residuals",
main = "Residuals vs Body")
abline(h=0)
plot(Flavor, rstandard(model1),
xlab="Flavor", ylab= "Standardized Residuals",
main = "Residuals vs Flavor")
abline(h=0)
plot(Oakiness, rstandard(model1),
xlab="Oakiness", ylab= "Standardized Residuals",
main = "Residuals vs Oakiness")
abline(h=0)
plot(Region, rstandard(model1),
xlab="Region", ylab= "Standardized Residuals",
main = "Residuals vs Region")
abline(h=0)
plot(Region, rstandard(model1),
xlab="Region", ylab= "Standardized Residuals",
main = "Residuals vs Region")
abline(h=0)
From the individual Residual vs Regressor plots we see that the variance of the
residuals appear to be related to Clarity in an widening funnel shape, and
Aroma in a narrowing funnel shape. Hence, we can consider transforming these
regressors or dropping them entirely.
par(mfrow=c(2,3))
#standardized residuals vs Regressor:
plot(Clarity, rstandard(model1),
xlab="Clarity", ylab= "Standardized Residuals",
main = "Residuals vs Clarity")
abline(h=0)
plot(Aroma, rstandard(model1),
xlab="Aroma", ylab= "Standardized Residuals",
main = "Residuals vs Aroma")
abline(h=0)
plot(Body, rstandard(model1),
xlab="Body", ylab= "Standardized Residuals",
main = "Residuals vs Body")
abline(h=0)
plot(Flavor, rstandard(model1),
xlab="Flavor", ylab= "Standardized Residuals",
main = "Residuals vs Flavor")
abline(h=0)
plot(Oakiness, rstandard(model1),
xlab="Oakiness", ylab= "Standardized Residuals",
main = "Residuals vs Oakiness")
abline(h=0)
plot(Region, rstandard(model1),
xlab="Region", ylab= "Standardized Residuals",
main = "Residuals vs Region")
abline(h=0)
model1 <- lm(Quality ~ Clarity + I(log(Aroma)) + Body + Flavor + Oakiness + Region,
data = wine)
summary(model1)
anova(model1)
model1 <- lm(Quality ~ Clarity + Aroma + Body + Flavor + Oakiness + Region,
data = wine)
summary(model1)
anova(model1)
# Chunk 1
library(dplyr)
library(ggplot2)
library(psych)
wine <- read.csv("../data/wine.csv")
attach(wine)
# Chunk 2
head(wine, n=5)
# Chunk 3
wine$Region <- as.factor(wine$Region)
attach(wine)
# Chunk 4
pairs.panels(wine,
method = "pearson", # correlation method
hist.col = "#00BECC",
density = FALSE,  # show density plots
ellipses = FALSE # show correlation ellipses
)
# Chunk 5
# Centering data: Subtract the mean, divide by sqrt(S_xx)
# sqrt(S_xx) = (n-p) * MS_res
# n = 38, p = 7, n-p = 31
q <- Quality
C <- (Clarity-mean(Clarity))/(sqrt(var(Clarity))*37)
A <- (Aroma - mean(Aroma))/(sqrt(var(Aroma))*37)
B <- (Body - mean(Body))/(sqrt(var(Body))*37999)
FL <- (Flavor - mean(Flavor))/(sqrt(var(Flavor))*37)
O <- (Oakiness - mean(Oakiness))/(sqrt(var(Oakiness))*37)
x <- cbind(C, A, B, FL, O)
x <- cor(x) # Correlation matrix of x, X'X
# The condition number is:
cond <- max(eigen(x)$values)/min(eigen(x)$values)
#condition indices:
cat("The condition indices are: ", max(eigen(x)$values)/eigen(x)$values, "\n")
#### To find VIFs:
C <- solve(x)  #this is (X'X)^(-1)
VIF <- diag(C)
cat("The VIF values are: ", VIF, "\n")
# Chunk 6
model1 <- lm(Quality ~ Clarity + Aroma + Body + Flavor + Oakiness + Region,
data = wine)
summary(model1)
anova(model1)
# Chunk 7
#Normal probability plot =  QQ plot
par(mfrow=c(1,2))
qqnorm(rstandard(model1),datax = TRUE, ylab = "Standardized Residuals",
xlab = "Z scores", main = "Normal Probability Plot Wine Data")
qqline(rstandard(model1),datax = TRUE)
#standardized residuals vs fitted:
plot(model1$fitted.values,rstandard(model1),
xlab="Fitted Quality", ylab= "Standardized Residuals",
main = "Wine Data")
abline(h=0)
plot(Oakiness, rstandard(model1),
xlab="Oakiness", ylab= "Standardized Residuals",
main = "Residuals vs Oakiness")
par(mfrow=c(2,3))
#standardized residuals vs Regressor:
plot(Clarity, rstandard(model1),
xlab="Clarity", ylab= "Standardized Residuals",
main = "Residuals vs Clarity")
abline(h=0)
plot(Aroma, rstandard(model1),
xlab="Aroma", ylab= "Standardized Residuals",
main = "Residuals vs Aroma")
abline(h=0)
plot(Body, rstandard(model1),
xlab="Body", ylab= "Standardized Residuals",
main = "Residuals vs Body")
abline(h=0)
plot(Flavor, rstandard(model1),
xlab="Flavor", ylab= "Standardized Residuals",
main = "Residuals vs Flavor")
abline(h=0)
plot(Oakiness, rstandard(model1),
xlab="Oakiness", ylab= "Standardized Residuals",
main = "Residuals vs Oakiness")
abline(h=0)
plot(Region, rstandard(model1),
xlab="Region", ylab= "Standardized Residuals",
main = "Residuals vs Region")
abline(h=0)
model2 <- lm(Quality ~ Clarity + Aroma + Body + Flavor + Oakiness + Region,
data = wine)
model3 <- lm(Quality ~ Clarity + I(Clarity * log(Clarity)) + Aroma + Body +
Flavor + Oakiness + Region, data = wine)
model2
model3
model3$coefficients
model3$coefficients["I(Clarity * log(Clarity))"]
power <- (gamma/beta) + 1
gamma <- model3$coefficients["I(Clarity * log(Clarity))"]
beta <- model2$coefficients["Clarity"]
power <- (gamma/beta) + 1
power
gamma
beta
beta <- model2$coefficients["Clarity"]
beta
gamma <- model3$coefficients["I(Clarity * log(Clarity))"][1]
beta <- model2$coefficients["Clarity"]
power <- (gamma/beta) + 1
power
as.numeric(power)
power <- as.numeric((gamma/beta) + 1)
# For Aroma
model2 <- lm(Quality ~ Clarity + Aroma + Body + Flavor + Oakiness + Region,
data = wine)
model3 <- lm(Quality ~ Clarity + Aroma + I(Aroma * log(Aroma)) + Body +
Flavor + Oakiness + Region, data = wine)
# For Aroma
model2 <- lm(Quality ~ Clarity + Aroma + Body + Flavor + Oakiness + Region,
data = wine)
model3 <- lm(Quality ~ Clarity + Aroma + I(Aroma * log(Aroma)) + Body +
Flavor + Oakiness + Region, data = wine)
gamma <- model3$coefficients["I(Aroma * log(Aroma))"]
beta <- model2$coefficients["Aroma"]
power <- as.numeric((gamma/beta) + 1)
power
power
model4 <- step(model1, direction = c("both"))
model4
summary(model4)
summary(model11)
summary(model1)
summary(model4)
head(wine)
model4 <- step(model1, direction = c("both"))
summary(model4)
model1 <- lm(Quality ~ Clarity + Aroma + Body + Flavor + Oakiness + Region,
data = wine)
model4 <- step(model1, direction = c("both"))
summary(model4)
head(wine)
unique(wine$Region)
summary(model1)
summary(model4)
summary(model1)
pairs.panels(wine,
method = "pearson", # correlation method
hist.col = "#00BECC",
density = FALSE,  # show density plots
ellipses = FALSE # show correlation ellipses
)
head(wine)
model5 <- lm(Quality ~ Body + Flavor + Oakiness + Region, data = wine)
summary(model5)
summary(model4)
summary(model5)
pairs.panels(wine,
method = "pearson", # correlation method
hist.col = "#00BECC",
density = FALSE,  # show density plots
ellipses = FALSE # show correlation ellipses
)
# Centering data: Subtract the mean, divide by sqrt(S_xx)
# sqrt(S_xx) = (n-p) * MS_res
# n = 38, p = 7, n-p = 31
q <- Quality
C <- (Clarity-mean(Clarity))/(sqrt(var(Clarity))*37)
A <- (Aroma - mean(Aroma))/(sqrt(var(Aroma))*37)
B <- (Body - mean(Body))/(sqrt(var(Body))*37999)
FL <- (Flavor - mean(Flavor))/(sqrt(var(Flavor))*37)
O <- (Oakiness - mean(Oakiness))/(sqrt(var(Oakiness))*37)
x <- cbind(C, A, B, FL, O)
x <- cor(x) # Correlation matrix of x, X'X
# The condition number is:
cond <- max(eigen(x)$values)/min(eigen(x)$values)
#condition indices:
cat("The condition indices are: ", max(eigen(x)$values)/eigen(x)$values, "\n")
#### To find VIFs:
C <- solve(x)  #this is (X'X)^(-1)
VIF <- diag(C)
cat("The VIF values are: ", VIF, "\n")
summary(model1)
6.25e-05
6.25e-5
#Normal probability plot =  QQ plot
par(mfrow=c(1,2))
qqnorm(rstandard(model1),datax = TRUE, ylab = "Standardized Residuals",
xlab = "Z scores", main = "Normal Probability Plot Wine Data")
qqline(rstandard(model1),datax = TRUE)
#standardized residuals vs fitted:
plot(model1$fitted.values,rstandard(model1),
xlab="Fitted Quality", ylab= "Standardized Residuals",
main = "Wine Data")
abline(h=0)
summary(model1)
model4
summary(model4)
par(mfrow=c(2,3))
#standardized residuals vs Regressor:
plot(Clarity, rstandard(model1),
xlab="Clarity", ylab= "Standardized Residuals",
main = "Residuals vs Clarity")
abline(h=0)
plot(Aroma, rstandard(model1),
xlab="Aroma", ylab= "Standardized Residuals",
main = "Residuals vs Aroma")
abline(h=0)
plot(Body, rstandard(model1),
xlab="Body", ylab= "Standardized Residuals",
main = "Residuals vs Body")
abline(h=0)
plot(Flavor, rstandard(model1),
xlab="Flavor", ylab= "Standardized Residuals",
main = "Residuals vs Flavor")
abline(h=0)
plot(Oakiness, rstandard(model1),
xlab="Oakiness", ylab= "Standardized Residuals",
main = "Residuals vs Oakiness")
abline(h=0)
plot(Region, rstandard(model1),
xlab="Region", ylab= "Standardized Residuals",
main = "Residuals vs Region")
abline(h=0)
dim(wine)
length(wine)
shape(wine)
size(wine)
3/38
jarque.bera.test
install.packages("tseries")
library(tseries)
jarque.bera.test
jarque.bera.test(wine$Quality)
rstandard(model1)
jarque.bera.test(rstandard(model1))
summary(model1)
